(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{611:function(t,a,s){"use strict";s.r(a);var n=s(68),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"可选的分号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可选的分号"}},[t._v("#")]),t._v(" 可选的分号")]),t._v(" "),s("p",[t._v("JavaScript 中使用分号（"),s("code",[t._v(";")]),t._v("）来分隔语句，在不影响代码解析的情况下，分号也可以省略掉，JavaScript 解析器会自动填补分号。推荐始终显式的使用分号，不要省略。")]),t._v(" "),s("h2",{attrs:{id:"_1-分号用于分隔语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-分号用于分隔语句"}},[t._v("#")]),t._v(" 1. 分号用于分隔语句")]),t._v(" "),s("p",[t._v("和其他许多编程语言一样，JavaScript使用分号（"),s("code",[t._v(";")]),t._v("）将语句分隔开。这对增强代码的可读性和整洁性是非常重要的：缺少分隔符，一条语句的结束就成了下一条语句的开始，反之亦然。")]),t._v(" "),s("h2",{attrs:{id:"_2-这些情况下分号可以省略不写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-这些情况下分号可以省略不写"}},[t._v("#")]),t._v(" 2. 这些情况下分号可以省略不写")]),t._v(" "),s("p",[t._v("一般在以下情况下，分号可以省略不写，JavaScript会在解析代码时，自动填补上分号。")]),t._v(" "),s("ul",[s("li",[t._v("如果语句各自独立占一行（换行），通常可以省略语句之间的分号，也有例外情况，下文有说明")]),t._v(" "),s("li",[t._v("程序结尾的分号也可以省略")]),t._v(" "),s("li",[t._v("右花括号 "),s("code",[t._v("}")]),t._v(" 之前的分号也可以省略")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此处分号可以省略")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果将两条语句写在一行，那么用于分隔的分号不能够省略，否则意思就变化了")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])]),s("h2",{attrs:{id:"_3-语句的分隔规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-语句的分隔规则"}},[t._v("#")]),t._v(" 3. 语句的分隔规则")]),t._v(" "),s("p",[t._v("上文提到，换行处一般可以省略分号。但需要注意的是，JavaScript并不是在所有换行处都填补分号："),s("strong",[t._v("只有在缺少了分号就无法正确解析代码的时候，它才会填补分号")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-合并解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-合并解析"}},[t._v("#")]),t._v(" 3.1 合并解析")]),t._v(" "),s("p",[t._v("JavaScript 会尽可能的将当前语句和随后的非空格字符（可能有多个）当成一个整体来解析，直至没办法合并了，才自动填补分号。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a\na\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//JavaScript将其解析如下，此时是正确的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("JavaScript 给第一行换行处添加了分号，因为如果没有分号，JavaScript 就无法解析代码 "),s("code",[t._v("var a a")]),t._v("。第二行 "),s("code",[t._v("a")]),t._v(" 也可以单独当做一条语句 "),s("code",[t._v("a;")]),t._v("，但 JavaScript 并没有给第二行结尾填补分号，因为它还可以和第三行内容一起解析成 "),s("code",[t._v("a = 3;")]),t._v("（你可以理解为“贪吃”）。")]),t._v(" "),s("h3",{attrs:{id:"_3-2-可能被误合并的情形"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-可能被误合并的情形"}},[t._v("#")]),t._v(" 3.2 可能被误合并的情形")]),t._v(" "),s("p",[t._v("通常来讲，如果一条语句以 “"),s("code",[t._v("(")]),t._v("”、“"),s("code",[t._v("[")]),t._v("”、“"),s("code",[t._v("/")]),t._v("”、“"),s("code",[t._v("+")]),t._v("”或“"),s("code",[t._v("-")]),t._v("”开始，那么它极有可能和前一条语句合在一起解析。")]),t._v(" "),s("blockquote",[s("p",[t._v("你可以用 3.1 合并解析一章的规则来解释它们为何可能会被误合并，这里只是举例，明白了对分号的解析规则之后，就根本不需要再去记了")])]),t._v(" "),s("p",[t._v("这就会导致一些意想不到的情形。例如下面的例子中，代码写成了两行，看起来是两条独立的语句：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("但第二行的圆括号却和第一行的 "),s("code",[t._v("f")]),t._v(" 组成了一个函数调用，JavaScript 会把这段代码看作：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("而这段代码的本意并不是这样。为了能让上述代码解析为两条不同的语句，必须手动填写行尾的显式分号。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-例外-return、break和continue语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-例外-return、break和continue语句"}},[t._v("#")]),t._v(" 3.3 例外：return、break和continue语句")]),t._v(" "),s("p",[t._v("如果这三个关键字后紧跟着换行，JavaScript 则会在换行处填补分号。换言之，在 "),s("code",[t._v("return")]),t._v("、"),s("code",[t._v("break")]),t._v(" 和 "),s("code",[t._v("continue")]),t._v(" 和随后的表达式之间不能有换行。")]),t._v(" "),s("blockquote",[s("p",[t._v("如果添加了换行，程序只有在极特殊的情况下才报错，你可能都不知道这里出现问题了。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码本意")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JavaScript 解析之后的结果")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-4-例外-和-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-例外-和-运算符"}},[t._v("#")]),t._v(" 3.4 例外："),s("code",[t._v("++")]),t._v(" 和 "),s("code",[t._v("--")]),t._v(" 运算符")]),t._v(" "),s("p",[s("code",[t._v("++")]),t._v(" 和 "),s("code",[t._v("--")]),t._v(" 运算符可以作为表达式的前缀(例如 "),s("code",[t._v("++x")]),t._v(")，也可以当作表达式的后缀(例如 "),s("code",[t._v("x++")]),t._v(")。如果将其用作后缀表达式，则它应当和表达式在同一行；否则行尾将补填分号，同时 "),s("code",[t._v("++")]),t._v(" 或 "),s("code",[t._v("--")]),t._v(" 将会作为下一行代码的前缀操作符并与之一起解析。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源代码")]),t._v("\nx\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\ny\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码本意")]),t._v("\nx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" y\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JavaScript 解析之后的结果")]),t._v("\nx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("y\n")])])]),s("h2",{attrs:{id:"_4-关于分号的编程风格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-关于分号的编程风格"}},[t._v("#")]),t._v(" 4. 关于分号的编程风格")]),t._v(" "),s("p",[t._v("不同的程序员有不同的编程风格，对于如何使用分号，一般而言，有以下这么三种。")]),t._v(" "),s("h3",{attrs:{id:"_4-1-始终显式的使用分号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-始终显式的使用分号"}},[t._v("#")]),t._v(" 4.1 始终显式的使用分号")]),t._v(" "),s("p",[t._v("许多 JavaScript 程序员使用分号来明确标记语句的结束，即使在并不完全需要分号的时候也是如此。")]),t._v(" "),s("p",[t._v("一般主流的用法也是这种。尤其在多人协作开发时，能够避免很多可能的错误。")]),t._v(" "),s("h3",{attrs:{id:"_4-2-尽可能的省略分号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-尽可能的省略分号"}},[t._v("#")]),t._v(" 4.2 尽可能的省略分号")]),t._v(" "),s("p",[t._v("另一种风格就是在任何可以省略分号的地方都将其省略，只有在不得不用的时候才使用分号。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.npmjs.com/package/uglify-js",target:"_blank",rel:"noopener noreferrer"}},[t._v("uglify-js"),s("OutboundLink")],1),t._v(" 等压缩工具压缩代码之后的结果，一般都是尽可能省略分号，这样可以减少文件大小，它对机器是友好的；但对程序员而言，省略分号看起来是简洁了，但会带来可读性、维护等问题及其他隐患。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-保守地使用分号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-保守地使用分号"}},[t._v("#")]),t._v(" 4.3 保守地使用分号")]),t._v(" "),s("p",[t._v("也有些程序员喜欢保守地在语句前加上一个分号，这样哪怕之前的语句被修改了或者分号被误删除了，当前语句还是会正确地解析：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里省略了分号")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前面的分号保证了正确的语句解析")]),t._v("\n")])])]),s("p",[t._v("一般而言一个 js 文件中的代码有无分号一目了然，保守地在语句前加一个分号，貌似也没多大必要。但在多文件合并的时候（前端构建会涉及到多个js文件合并在一个文件中），这个分号还是有一定的作用。")]),t._v(" "),s("p",[t._v("例如下面的两个文件，每个文件单独允许的话是没有任何问题，但如果合并之后两者之间没分号分隔的话，合并起来是会有问题的。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" param"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果自己写一个js模块，为避免合并的时候出现上述问题，一般会在最开始部分增加一个;或!，但最佳的方式应该让构建工具自己来处理这种情况")]),t._v(" "),s("blockquote",[s("p",[t._v("请看【jshint】")])])])}),[],!1,null,null,null);a.default=r.exports}}]);